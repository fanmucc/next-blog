import dynamic from "next/dynamic";
import markdownIt from "@/utils/markdowIt";
import path from "path";
import { getMdFiles } from "@/utils";

import Layout from "@/Layout";
import Head from "next/head";
import Markdown from "@/components/Markdown";

const MarkdownMenu = dynamic(() => import("@/components/MarkdownMenu"), {
	ssr: false,
});

import type { NextApiRequest, NextApiResponse } from "next";
import type { AppProps } from "next/app";

interface Iprops extends AppProps {
	markdown: string;
}

import styles from "@/styles/index-page.module.scss";

const Blog = (props: Iprops) => {
	return (
		<>
			<Head>
				<title>Create Next App</title>
				<meta name='description' content='Generated by create next app' />
				<meta name='viewport' content='width=device-width, initial-scale=1' />
				<link rel='icon' href='/favicon.ico' />
				<style></style>
			</Head>
			<Layout>
				<div className={styles["index"]}>
					<Markdown markdown={props?.markdown || ""} />
					<div>
						<MarkdownMenu markdownContent={props?.markdown || ""} />
					</div>
				</div>
			</Layout>
		</>
	);
};

export default Blog;

export async function getServerSideProps(context) {
	// console.log(req, res, "控制台输出");
	// var result = MarkdownIt("::: spoiler click me\n*content*\n:::\n");
	const { params } = context;
	const { id } = params; // 获取动态路由参数
	console.log(id, "===id");

	const fs = require("fs");
	const path = require("path");
	const pathUrl = path.join("./src/markdown");
	let a = "";
	// 调用函数
	let files = await getMdFiles(fs, path, pathUrl)
		.then((files) => {
			a = files[0];
		})
		.catch((err) => console.error(err));
	var result = markdownIt(a);
	return {
		props: {
			headerMenus: [
				{
					lable: "测试",
					id: 1,
				},
			],
			markdown: result,
		}, // will be passed to the page component as props
	};
}

// export async function getServerSideProps({
// 	req,
// 	res,
// }: {
// 	req: NextApiRequest;
// 	res: NextApiResponse;
// }) {
// 	console.log(req.params);
// 	// console.log(req, res, "控制台输出");
// 	// var result = MarkdownIt("::: spoiler click me\n*content*\n:::\n");
// 	const fs = require("fs");
// 	const path = require("path");
// 	const pathUrl = path.join("./src/markdown");
// 	let a = "";
// 	// 调用函数
// 	let files = await getMdFiles(fs, path, pathUrl)
// 		.then((files) => {
// 			a = files[0];
// 		})
// 		.catch((err) => console.error(err));
// 	// console.log(files);
// 	var result = markdownIt(a);

// 	// 设置缓存
// 	res.setHeader(
// 		"Cache-Control",
// 		"public, s-maxage=10, stale-while-revalidate=59"
// 	);

// 	// log(a);
// 	return {
// 		props: {
// 			headerMenus: [
// 				{
// 					lable: "测试",
// 					id: 1,
// 				},
// 			],
// 			markdown: result,
// 		}, // will be passed to the page component as props
// 	};
// }
